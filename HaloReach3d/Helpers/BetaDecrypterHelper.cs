using System;
using System.Collections.Generic;
using System.Text;
using System.Security.Cryptography;

namespace HaloReach3d.Helpers
{
    class BetaDecrypterHelper
    {
        public static byte[] DecryptStringData(byte[] data)
        {
            
            Aes AEDec = new AesCryptoServiceProvider();
            AEDec.Mode = CipherMode.CBC;
            AEDec.Key = new byte[] { 0xD7, 0xD6, 0x83, 0xC8, 0x8F, 0xC9, 0x86, 0x8A, 0xD1, 0x80, 0xFA, 0x8D, 0x8C, 0xC0, 0x9E, 0xFE }; // The key is 0x72, 0x73, 0x26, 0x6D, 0x2A, 0x6C, 0x23, 0x2F, 0x74, 0x25, 0x5F, 0x28, 0x29, 0x65, 0x3B, 0x5B with each byte xor'd with 0xA5 
            AEDec.IV = new byte[] { 0xeb, 0xea, 0xbf, 0xf4, 0xb3, 0xf5, 0xba, 0xb6, 0xed, 0xbc, 0xc6, 0xb1, 0xb0, 0xfc, 0xa2, 0xc2 }; // The IV is the key with each byte xor'd with 0x3C
            AEDec.Padding = PaddingMode.None;
            ICryptoTransform unenc = AEDec.CreateDecryptor(AEDec.Key, AEDec.IV);
            return unenc.TransformFinalBlock(data, 0, data.Length);
        }
        public static byte[] EncryptStringData(byte[] data)
        {
            Aes AEEnc = new AesCryptoServiceProvider();
            AEEnc.Mode = CipherMode.CBC;
            AEEnc.Key = new byte[] { 0xD7, 0xD6, 0x83, 0xC8, 0x8F, 0xC9, 0x86, 0x8A, 0xD1, 0x80, 0xFA, 0x8D, 0x8C, 0xC0, 0x9E, 0xFE }; // The key is 0x72, 0x73, 0x26, 0x6D, 0x2A, 0x6C, 0x23, 0x2F, 0x74, 0x25, 0x5F, 0x28, 0x29, 0x65, 0x3B, 0x5B with each byte xor'd with 0xA5 
            AEEnc.IV = new byte[] { 0xeb, 0xea, 0xbf, 0xf4, 0xb3, 0xf5, 0xba, 0xb6, 0xed, 0xbc, 0xc6, 0xb1, 0xb0, 0xfc, 0xa2, 0xc2 }; // The IV is the key with each byte xor'd with 0x3C
            AEEnc.Padding = PaddingMode.None;
            ICryptoTransform enc = AEEnc.CreateEncryptor(AEEnc.Key, AEEnc.IV);
            return enc.TransformFinalBlock(data, 0, data.Length);
        }
    }
}
